	;; Neh Patel
	;; Booths algorithm implementation
	;;;   nasm -f elf -g -F stabs booth.asm
	;;;  gcc -m32 -g -o booth booth.o

%define STDIN 0
%define STDOUT 1
%define SYSCALL_EXIT 1
%define SYSCALL_READ 3
%define SYSCALL_WRITE 4
%define BUFLEN 256
%define BUFLEN2 256
	
	SECTION .data
msg1:	db "Enter the first number to multiply: "
len1:	equ $-msg1

msg2:	db "Enter the second number to multiply: "
len2:	equ $-msg2

print_str:	              db "Result: %d", 10, 0
	
	SECTION .bss	;unintialized data
temp:   resb 32
buf:	resb BUFLEN		;buffer for read
buf2:	resb BUFLEN2
product:	resb 64
	
	SECTION .text
extern atoi
extern printf
	
	global main

main:	 nop
start:
	mov     eax, SYSCALL_WRITE 	;write
	mov     ebx, STDOUT		;file descriptor
	mov     ecx, msg1   		;addr message
	mov     edx, len1   		;lenght of message
	int     080h	    		;kernel call

	;;  reading input
	mov     eax, SYSCALL_READ 	;read
	mov     ebx, STDIN	  	;file descriptor
	mov     ecx, buf	  	;address to buf
	mov     edx, BUFLEN	  	;buf lenght
	int     080h		  	;kernel call

	;; second input 
	mov     eax, SYSCALL_WRITE ;write
	mov     ebx, STDOUT ;file descriptor
	mov     ecx, msg2   ;addr message
	mov     edx, len2   ;lenght of message
	int     080h	    ;kernel call

	;;   reading input
	mov     eax, SYSCALL_READ ;read
	mov     ebx, STDIN	  ;file descriptor
	mov     ecx, buf2	  ;address to buf
	mov     edx, BUFLEN2	  ;buf lenght
	int     080h		  ;kernel call
	;; ---------------------------------
	mov 	esi, buf
	push 	esi
	call 	atoi
	add 	esp, 4
	mov 	ebx, eax

	mov 	esi, buf2
	push    esi
	call    atoi
	add     esp, 4
	;; --------------------------------------------
	;; 1st in ebx
	;; 2nd in eax
intial:
	mov 	ecx, 20h
loop:
	mov 	dl, al
	and 	bl, 0Fh
	cmp	dl, 0h		;00
	je 	zero
	cmp 	dl, 1h		;01
	je 	one
	cmp 	dl, 2h		;10
	je 	two
	cmp	dl, 3h		;11
	je	three
cond:
	dec 	ecx 
	jnz 	loop
	jmp 	result 

	;; ---------------------------------------------
zero:
	mov 	[product],eax
	shr	eax, 1h		;shift right by one
	jmp 	cond
	
one:
	mov 	[product],eax
	add 	eax, ebx
	shr 	eax, 1h
	jmp 	cond
	
two:
	mov 	[product],eax	
	add 	eax,ebx
	shr	eax,1h
	jmp 	cond
	
three:	
        mov 	[product],eax
	shr 	eax, 1h		;shift right by one
	jmp 	cond 

result:	
	push 	eax
	push 	print_str
	call 	printf
	add 	esp,8
	pop 	eax 

	
exit:
	mov eax, SYSCALL_EXIT	;exit function
	mov ebx,0	;exti code, 0 = normal
	int 080h		;kernel call
	